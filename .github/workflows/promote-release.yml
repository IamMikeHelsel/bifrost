name: Promote Main to Release

on:
  # Manual trigger with optional version bump
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

  # Automatic promotion on main branch push (optional)
  push:
    branches: [main]
    paths:
      - 'packages/*/pyproject.toml'
      - 'packages/*/Cargo.toml'
    # Only if version was manually bumped in main

permissions:
  contents: write
  actions: write

jobs:
  promote:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    
    - name: Install dependencies
      run: |
        uv python install 3.12
        uv sync --dev
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Bump version (if manual trigger)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.version_bump != ''
      run: |
        echo "Bumping version: ${{ github.event.inputs.version_bump }}"
        # TODO: Implement version bumping logic
        # uv run python tools/bump-version.py ${{ github.event.inputs.version_bump }}
    
    - name: Get current version
      id: version
      run: |
        # Extract version from main package
        VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('packages/bifrost/pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Check if release branch exists
      id: branch_check
      run: |
        if git ls-remote --heads origin release; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create release branch (if not exists)
      if: steps.branch_check.outputs.exists == 'false'
      run: |
        git checkout -b release
        git push -u origin release
        echo "Created new release branch"
    
    - name: Switch to release branch
      if: steps.branch_check.outputs.exists == 'true'
      run: |
        git checkout release
        git pull origin release
    
    - name: Merge main into release
      run: |
        git merge origin/main --no-ff -m "Promote main to release v${{ steps.version.outputs.version }}"
        git push origin release
    
    - name: Create release tag
      run: |
        git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"
    
    - name: Create GitHub Release
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Changes in v${{ steps.version.outputs.version }}
          
          This release includes all changes from main branch up to commit: ${{ github.sha }}
          
          ### Features
          - Promoted from main branch
          
          ### Bug Fixes
          - Various fixes and improvements
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.version }}...main
        draft: false
        prerelease: false
    
    - name: Summary
      run: |
        echo "## Promotion Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: main branch (commit: ${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: release branch" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag created**: v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release created**: ${{ github.event.inputs.create_release || 'false' }}" >> $GITHUB_STEP_SUMMARY