name: Documentation Update

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'go-gateway/README.md'
      - 'vscode-extension/README.md'
      - 'docs/diagrams/**'
      - '**/*.md'
  workflow_dispatch:
  schedule:
    # Update docs daily at 6 AM UTC
    - cron: '0 6 * * *'

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  actions: write
  checks: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Generate API documentation from Go code
  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Install godoc
        run: go install golang.org/x/tools/cmd/godoc@latest
        
      - name: Generate Go documentation
        working-directory: ./go-gateway
        run: |
          # Generate package documentation
          mkdir -p ../docs/api/go
          
          # Generate HTML documentation
          godoc -html ./internal/protocols > ../docs/api/go/protocols.html
          godoc -html ./internal/gateway > ../docs/api/go/gateway.html
          godoc -html ./internal/performance > ../docs/api/go/performance.html
          
          # Generate markdown documentation
          go doc -all ./internal/protocols > ../docs/api/go/protocols.md
          go doc -all ./internal/gateway > ../docs/api/go/gateway.md
          go doc -all ./internal/performance > ../docs/api/go/performance.md
          
      - name: Upload API docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: docs/api/
          
  # Generate diagrams from PlantUML and Mermaid
  generate-diagrams:
    name: Generate Diagrams
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Java (for PlantUML)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Install PlantUML
        run: |
          wget -O plantuml.jar https://github.com/plantuml/plantuml/releases/latest/download/plantuml-1.2024.0.jar
          
      - name: Generate PlantUML diagrams
        run: |
          find docs/diagrams -name "*.puml" -type f | while read file; do
            echo "Processing $file"
            java -jar plantuml.jar -tsvg "$file"
            java -jar plantuml.jar -tpng "$file"
          done
          
      - name: Set up Node.js (for Mermaid)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Mermaid CLI
        run: npm install -g @mermaid-js/mermaid-cli
        
      - name: Generate Mermaid diagrams
        run: |
          # Create exports directory
          mkdir -p docs/diagrams/exports/svg docs/diagrams/exports/png
          
          # Process Mermaid diagrams from markdown files
          find docs -name "*.md" -type f | xargs grep -l "```mermaid" | while read file; do
            echo "Processing Mermaid diagrams in $file"
            # Extract mermaid blocks and convert them
            awk '/```mermaid/,/```/' "$file" | grep -v '```' > temp_diagram.mmd
            if [ -s temp_diagram.mmd ]; then
              filename=$(basename "$file" .md)
              mmdc -i temp_diagram.mmd -o "docs/diagrams/exports/svg/${filename}.svg"
              mmdc -i temp_diagram.mmd -o "docs/diagrams/exports/png/${filename}.png"
            fi
            rm -f temp_diagram.mmd
          done
          
      - name: Upload diagram artifacts
        uses: actions/upload-artifact@v4
        with:
          name: diagrams
          path: docs/diagrams/exports/
          
  # Build documentation site
  build-docs-site:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    needs: [generate-api-docs, generate-diagrams]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download API docs
        uses: actions/download-artifact@v3
        with:
          name: api-docs
          path: docs/api/
          
      - name: Download diagrams
        uses: actions/download-artifact@v3
        with:
          name: diagrams
          path: docs/diagrams/exports/
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install MkDocs and plugins
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin mkdocs-plantuml-plugin
          pip install mkdocs-git-revision-date-localized-plugin mkdocs-minify-plugin
          
      - name: Create MkDocs configuration
        run: |
          cat > mkdocs.yml << 'EOF'
          site_name: Bifrost Documentation
          site_description: High-Performance Industrial Gateway Documentation
          site_url: https://${{ github.repository_owner }}.github.io/bifrost
          repo_name: ${{ github.repository }}
          repo_url: https://github.com/${{ github.repository }}
          
          theme:
            name: material
            palette:
              - scheme: default
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-7
                  name: Switch to dark mode
              - scheme: slate
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-4
                  name: Switch to light mode
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - navigation.indexes
              - toc.integrate
              - search.highlight
              - search.share
              - content.code.annotate
              - content.code.copy
          
          plugins:
            - search
            - mermaid2
            - git-revision-date-localized:
                type: date
            - minify:
                minify_html: true
          
          markdown_extensions:
            - admonition
            - pymdownx.details
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:pymdownx.superfences.fence_code_format
            - pymdownx.highlight
            - pymdownx.inlinehilite
            - pymdownx.snippets
            - attr_list
            - md_in_html
          
          nav:
            - Home: index.md
            - Getting Started:
              - Installation: getting-started/installation.md
              - Quick Start: getting-started/quickstart.md
              - Configuration: getting-started/configuration.md
            - Architecture:
              - Overview: architecture/overview.md
              - Go Gateway: architecture/go-gateway.md
              - VS Code Extension: architecture/vscode-extension.md
              - Protocols: architecture/protocols.md
            - API Reference:
              - Gateway API: api/go/gateway.md
              - Protocols API: api/go/protocols.md
              - Performance API: api/go/performance.md
            - Diagrams:
              - System Architecture: diagrams/README.md
              - Standards: diagrams/STANDARDS.md
            - Development:
              - Contributing: CONTRIBUTING.md
              - Building: building.md
              - Testing: testing.md
          
          extra:
            social:
              - icon: fontawesome/brands/github
                link: https://github.com/${{ github.repository }}
          EOF
          
      - name: Create documentation structure
        run: |
          mkdir -p docs_site/docs/{getting-started,architecture,api/go,diagrams}
          
          # Copy main documentation
          cp README.md docs_site/docs/index.md
          cp docs/*.md docs_site/docs/ 2>/dev/null || true
          
          # Copy architecture docs
          echo "# Go Gateway Architecture" > docs_site/docs/architecture/go-gateway.md
          cat go-gateway/README.md >> docs_site/docs/architecture/go-gateway.md
          
          echo "# VS Code Extension Architecture" > docs_site/docs/architecture/vscode-extension.md
          cat vscode-extension/README.md >> docs_site/docs/architecture/vscode-extension.md
          
          # Copy API documentation
          cp docs/api/go/*.md docs_site/docs/api/go/ 2>/dev/null || true
          
          # Copy diagram documentation
          cp docs/diagrams/*.md docs_site/docs/diagrams/ 2>/dev/null || true
          
          # Create missing files with placeholders
          echo "# Installation Guide" > docs_site/docs/getting-started/installation.md
          echo "# Quick Start Guide" > docs_site/docs/getting-started/quickstart.md
          echo "# Configuration Guide" > docs_site/docs/getting-started/configuration.md
          echo "# Architecture Overview" > docs_site/docs/architecture/overview.md
          echo "# Protocol Documentation" > docs_site/docs/architecture/protocols.md
          echo "# Building Bifrost" > docs_site/docs/building.md
          echo "# Testing Guide" > docs_site/docs/testing.md
          
          # Copy mkdocs.yml to docs_site
          mv mkdocs.yml docs_site/
          
      - name: Build documentation site
        working-directory: docs_site
        run: mkdocs build
        
      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-site
          path: docs_site/site/
          
  # Deploy to GitHub Pages
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs-site
    if: github.ref == 'refs/heads/main'
      
    steps:
      - name: Download site artifact
        uses: actions/download-artifact@v3
        with:
          name: docs-site
          path: ./site/
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site/
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        
  # Update Wiki
  update-wiki:
    name: Update GitHub Wiki
    runs-on: ubuntu-latest
    needs: [generate-api-docs, generate-diagrams]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Checkout wiki
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          path: wiki
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download API docs
        uses: actions/download-artifact@v3
        with:
          name: api-docs
          path: api-docs/
          
      - name: Update wiki pages
        run: |
          # Create wiki structure
          cd wiki
          
          # Home page
          cat > Home.md << 'EOF'
          # Bifrost Wiki
          
          Welcome to the Bifrost documentation wiki! This wiki provides comprehensive documentation for the high-performance industrial gateway.
          
          ## 📚 Documentation Sections
          
          - [Architecture](Architecture) - System architecture and design
          - [API Reference](API-Reference) - Complete API documentation
          - [Installation Guide](Installation) - Setup and installation instructions
          - [Configuration](Configuration) - Configuration options and examples
          - [Protocol Support](Protocols) - Supported industrial protocols
          - [Performance](Performance) - Performance metrics and optimization
          - [Troubleshooting](Troubleshooting) - Common issues and solutions
          
          ## 🚀 Quick Links
          
          - [GitHub Repository](https://github.com/${{ github.repository }})
          - [Latest Release](https://github.com/${{ github.repository }}/releases/latest)
          - [Documentation Site](https://${{ github.repository_owner }}.github.io/bifrost)
          
          ## 📊 Performance Metrics
          
          - **Throughput**: 18,879 ops/sec
          - **Latency**: 53µs average
          - **Memory**: <50MB footprint
          - **Binary Size**: ~15MB
          EOF
          
          # Architecture page
          echo "# System Architecture" > Architecture.md
          cat ../docs/bifrost_spec.md >> Architecture.md
          
          # API Reference
          echo "# API Reference" > API-Reference.md
          echo "" >> API-Reference.md
          echo "## Go Gateway API" >> API-Reference.md
          cat ../api-docs/go/gateway.md >> API-Reference.md
          echo "" >> API-Reference.md
          echo "## Protocols API" >> API-Reference.md
          cat ../api-docs/go/protocols.md >> API-Reference.md
          
          # Installation
          echo "# Installation Guide" > Installation.md
          echo "" >> Installation.md
          echo "## Quick Installation" >> Installation.md
          echo '```bash' >> Installation.md
          echo "# Download latest release" >> Installation.md
          echo "wget https://github.com/${{ github.repository }}/releases/latest/download/bifrost-gateway-linux-amd64" >> Installation.md
          echo "chmod +x bifrost-gateway-linux-amd64" >> Installation.md
          echo "./bifrost-gateway-linux-amd64" >> Installation.md
          echo '```' >> Installation.md
          
          # Configuration
          echo "# Configuration Guide" > Configuration.md
          cat ../docs/CLAUDE.md >> Configuration.md
          
          # Protocols
          echo "# Protocol Support" > Protocols.md
          echo "" >> Protocols.md
          echo "## Supported Protocols" >> Protocols.md
          echo "- Modbus TCP/RTU" >> Protocols.md
          echo "- OPC-UA (in development)" >> Protocols.md
          echo "- Ethernet/IP (planned)" >> Protocols.md
          
          # Performance
          echo "# Performance Metrics" > Performance.md
          echo "" >> Performance.md
          echo "## Achieved Performance" >> Performance.md
          echo "- **Throughput**: 18,879 operations/second" >> Performance.md
          echo "- **Latency**: 53µs average response time" >> Performance.md
          echo "- **Memory Usage**: <50MB baseline footprint" >> Performance.md
          echo "- **Concurrent Connections**: 1000+ simultaneous devices" >> Performance.md
          
          # Troubleshooting
          echo "# Troubleshooting" > Troubleshooting.md
          echo "" >> Troubleshooting.md
          echo "## Common Issues" >> Troubleshooting.md
          echo "### Connection Problems" >> Troubleshooting.md
          echo "### Performance Issues" >> Troubleshooting.md
          echo "### Configuration Errors" >> Troubleshooting.md
          
      - name: Commit and push wiki changes
        run: |
          cd wiki
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📚 Auto-update wiki documentation
            
            - Updated from main branch: ${{ github.sha }}
            - Generated API documentation
            - Updated architecture diagrams
            - Refreshed performance metrics
            
            🤖 Automated update by GitHub Actions"
            git push
          fi
          
  notify-docs:
    name: Notify Documentation Update
    runs-on: ubuntu-latest
    needs: [deploy-pages, update-wiki]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy-pages.result == 'success' && needs.update-wiki.result == 'success'
        run: |
          echo "📚 Documentation successfully updated!"
          echo "🌐 GitHub Pages: https://${{ github.repository_owner }}.github.io/bifrost"
          echo "📖 Wiki: https://github.com/${{ github.repository }}/wiki"
          echo "📊 API Docs: Generated from latest code"
          echo "🎨 Diagrams: Updated PlantUML and Mermaid diagrams"
          
      - name: Notify partial failure
        if: needs.deploy-pages.result != 'success' || needs.update-wiki.result != 'success'
        run: |
          echo "⚠️ Documentation update completed with issues"
          echo "GitHub Pages: ${{ needs.deploy-pages.result }}"
          echo "Wiki Update: ${{ needs.update-wiki.result }}"