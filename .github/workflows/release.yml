name: Automated Release

on:
  schedule:
    # Run every Sunday at 2 AM UTC to create weekly releases
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  pull-requests: write
  id-token: write
  actions: write
  checks: write
  deployments: write
  issues: write
  pages: write
  repository-projects: write
  security-events: write
  statuses: write

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '20'

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changes.outputs.has_changes }}
      last_release_sha: ${{ steps.release.outputs.last_release_sha }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get last release
        id: release
        run: |
          LAST_RELEASE=$(gh release list --limit 1 --json tagName,createdAt,targetCommitish | jq -r '.[0].targetCommitish // "HEAD~50"')
          echo "last_release_sha=$LAST_RELEASE" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for changes since last release
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Manual release triggered"
          else
            CHANGES=$(git rev-list --count ${{ steps.release.outputs.last_release_sha }}..HEAD -- . ':(exclude)*.md' ':(exclude).github/workflows/*' ':(exclude)docs/*')
            if [ "$CHANGES" -gt 0 ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Found $CHANGES commits with substantial changes"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No substantial changes since last release"
            fi
          fi
          
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_notes: ${{ steps.notes.outputs.release_notes }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine next version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix for version manipulation
          LATEST_VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Determine release type
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'patch' }}"
          
          # Increment version based on type
          case $RELEASE_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
      - name: Generate release notes
        id: notes
        run: |
          LAST_RELEASE_SHA="${{ needs.check-changes.outputs.last_release_sha }}"
          
          # Generate changelog
          echo "## ðŸš€ What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last release
          git log --pretty=format:"- %s (%h)" $LAST_RELEASE_SHA..HEAD -- . ':(exclude)*.md' ':(exclude).github/workflows/*' >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## ðŸ“Š Performance Metrics" >> release_notes.md
          echo "- **Target Performance**: 18,879 ops/sec with 53Âµs latency" >> release_notes.md
          echo "- **Binary Size**: ~15MB single binary" >> release_notes.md
          echo "- **Memory Footprint**: <50MB" >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## ðŸ”§ Installation" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "# Download and run the gateway" >> release_notes.md
          echo "wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/bifrost-gateway-linux-amd64" >> release_notes.md
          echo "chmod +x bifrost-gateway-linux-amd64" >> release_notes.md
          echo "./bifrost-gateway-linux-amd64" >> release_notes.md
          echo '```' >> release_notes.md
          
          # Set output for later use
          RELEASE_NOTES=$(cat release_notes.md)
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [check-changes, determine-version]
    if: needs.check-changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Build binary
        working-directory: ./go-gateway
        run: |
          BINARY_NAME="bifrost-gateway"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
          go build -a -installsuffix cgo \
          -ldflags="-w -s -X main.Version=${{ needs.determine-version.outputs.new_version }} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o ${BINARY_NAME} ./cmd/gateway
          
          # Create archive
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip "bifrost-gateway-${{ matrix.os }}-${{ matrix.arch }}.zip" ${BINARY_NAME}
          else
            tar -czf "bifrost-gateway-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" ${BINARY_NAME}
          fi
          
      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            ./go-gateway/*.tar.gz
            ./go-gateway/*.zip
            
  build-vscode-extension:
    name: Build VS Code Extension
    runs-on: ubuntu-latest
    needs: [check-changes, determine-version]
    if: needs.check-changes.outputs.has_changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vscode-extension/package-lock.json
          
      - name: Update extension version
        working-directory: ./vscode-extension
        run: |
          VERSION="${{ needs.determine-version.outputs.new_version }}"
          VERSION_NO_V="${VERSION#v}"
          npm version $VERSION_NO_V --no-git-tag-version
          
      - name: Install dependencies
        working-directory: ./vscode-extension
        run: npm ci
        
      - name: Compile extension
        working-directory: ./vscode-extension
        run: npm run compile
        
      - name: Package extension
        working-directory: ./vscode-extension
        run: |
          npm install -g @vscode/vsce
          vsce package --allow-missing-repository
          
      - name: Upload extension artifact
        uses: actions/upload-artifact@v3
        with:
          name: vscode-extension-artifact
          path: ./vscode-extension/*.vsix
          
  build-container:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [check-changes, determine-version, build-release-artifacts]
    if: needs.check-changes.outputs.has_changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: ./artifacts/
          
      - name: Extract Linux binary
        run: |
          cd artifacts
          tar -xzf bifrost-gateway-linux-amd64.tar.gz
          mv bifrost-gateway ../go-gateway/
          chmod +x ../go-gateway/bifrost-gateway
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: ./go-gateway
          file: ./go-gateway/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.determine-version.outputs.new_version }}
          labels: |
            org.opencontainers.image.title=Bifrost Gateway
            org.opencontainers.image.description=High-performance industrial gateway
            org.opencontainers.image.version=${{ needs.determine-version.outputs.new_version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-changes, determine-version, build-release-artifacts, build-vscode-extension, build-container]
    if: needs.check-changes.outputs.has_changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.determine-version.outputs.new_version }}
          name: "Bifrost ${{ needs.determine-version.outputs.new_version }}"
          body: ${{ needs.determine-version.outputs.release_notes }}
          artifacts: |
            release-artifacts/*
            vscode-extension-artifact/*.vsix
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: false
          
      - name: Update latest release
        if: github.event.inputs.prerelease != 'true'
        run: |
          gh release edit ${{ needs.determine-version.outputs.new_version }} --latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [determine-version, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Notify success
        run: |
          echo "ðŸŽ‰ Successfully created release ${{ needs.determine-version.outputs.new_version }}"
          echo "ðŸ“¦ Artifacts available:"
          echo "  - Go Gateway binaries for Linux, macOS, Windows"
          echo "  - VS Code extension package"
          echo "  - Container images on ghcr.io"
          echo ""
          echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.determine-version.outputs.new_version }}"