name: Runner Health Check

on:
  schedule:
    # Check runner health every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      force-check:
        description: 'Force health check'
        required: false
        default: true
        type: boolean

jobs:
  check-self-hosted:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      self-hosted-available: ${{ steps.health-check.outputs.available }}
      response-time: ${{ steps.health-check.outputs.response-time }}
    steps:
      - name: Test self-hosted runner availability
        id: health-check
        run: |
          echo "üè• Testing self-hosted runner health..."
          
          # Start timing
          start_time=$(date +%s.%N)
          
          # Attempt to dispatch a test job to self-hosted runner
          # This is a simple approach - you might want to use GitHub API for more sophisticated checking
          
          # For now, we'll simulate the check
          # In a real setup, you'd ping your runner or use GitHub API
          available="true"
          
          end_time=$(date +%s.%N)
          response_time=$(echo "$end_time - $start_time" | bc -l)
          
          echo "available=$available" >> $GITHUB_OUTPUT
          echo "response-time=${response_time}s" >> $GITHUB_OUTPUT
          
          if [[ "$available" == "true" ]]; then
            echo "‚úÖ Self-hosted runner is healthy (${response_time}s)"
          else
            echo "‚ùå Self-hosted runner is not responding"
          fi

  # Test job that actually runs on FJALL self-hosted runner
  test-self-hosted-direct:
    runs-on: [self-hosted, FJALL]
    timeout-minutes: 1  # 1 minute timeout for health check
    continue-on-error: true
    outputs:
      success: ${{ steps.test.outcome == 'success' }}
    steps:
      - name: Quick health test
        id: test
        shell: pwsh
        run: |
          Write-Host "üè† FJALL self-hosted runner health test"
          Write-Host "Runner: $env:COMPUTERNAME"
          
          # Windows system info
          $memory = Get-WmiObject -Class Win32_ComputerSystem
          $memoryGB = [math]::Round($memory.TotalPhysicalMemory / 1GB, 2)
          Write-Host "Memory: $memoryGB GB total"
          
          $disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'"
          $freeSpaceGB = [math]::Round($disk.FreeSpace / 1GB, 2)
          Write-Host "Disk C: $freeSpaceGB GB free"
          
          $uptime = (Get-Date) - (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
          Write-Host "Uptime: $($uptime.Days) days, $($uptime.Hours) hours"

  # Report results
  report-health:
    needs: [check-self-hosted, test-self-hosted-direct]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate health report
        run: |
          echo "## üè• Runner Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Self-hosted availability
          if [[ "${{ needs.test-self-hosted-direct.result }}" == "success" ]]; then
            echo "‚úÖ **Self-hosted runner**: Healthy and responsive" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-self-hosted-direct.result }}" == "failure" ]]; then
            echo "‚ùå **Self-hosted runner**: Failed health check" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-self-hosted-direct.result }}" == "cancelled" ]]; then
            echo "‚è±Ô∏è **Self-hosted runner**: Timed out (>2 minutes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùì **Self-hosted runner**: Unknown status" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Response time**: ${{ needs.check-self-hosted.outputs.response-time }}" >> $GITHUB_STEP_SUMMARY
          
          # Add recommendations
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üí° Recommendations" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-self-hosted-direct.result }}" != "success" ]]; then
            echo "- Check self-hosted runner service status" >> $GITHUB_STEP_SUMMARY
            echo "- Verify network connectivity" >> $GITHUB_STEP_SUMMARY
            echo "- Consider restarting runner service" >> $GITHUB_STEP_SUMMARY
            echo "- Workflows will automatically fall back to cloud runners" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Self-hosted runner is performing well" >> $GITHUB_STEP_SUMMARY
            echo "- Continue using preferred runner configuration" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Alert on runner issues
        if: needs.test-self-hosted-direct.result != 'success'
        run: |
          echo "‚ö†Ô∏è Self-hosted runner health check failed!"
          echo "Status: ${{ needs.test-self-hosted-direct.result }}"
          echo "Workflows will automatically fall back to cloud runners."
          
          # Here you could add integration with your monitoring system
          # For example, sending to Slack, PagerDuty, etc.
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üö® Self-hosted GitHub runner is down!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}