name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add explicit permissions for GITHUB_TOKEN
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  checks: write

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Go Gateway CI/CD
  go-gateway:
    name: Go Gateway Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Install dependencies
        working-directory: ./go-gateway
        run: go mod download
        
      - name: Run comprehensive security scanning
        working-directory: ./go-gateway
        run: |
          # Install security tools
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          # Create security reports directory
          mkdir -p security-reports
          
          # GoSec static analysis
          echo "Running GoSec security analysis..."
          gosec -fmt sarif -out security-reports/gosec.sarif ./... || true
          gosec -fmt json -out security-reports/gosec.json ./... || true
          
          # Vulnerability scanning
          echo "Running vulnerability scanning..."
          govulncheck -json ./... > security-reports/govulncheck.json || true
          
          # Generate summary report
          echo "=== Security Scan Summary ===" > security-reports/summary.txt
          echo "Date: $(date)" >> security-reports/summary.txt
          echo "Commit: $GITHUB_SHA" >> security-reports/summary.txt
          echo "" >> security-reports/summary.txt
          
          if [ -f security-reports/gosec.json ]; then
            HIGH_ISSUES=$(jq '.Stats.found_issues // 0' security-reports/gosec.json)
            echo "GoSec Issues Found: $HIGH_ISSUES" >> security-reports/summary.txt
          fi
          
          echo "Security scanning completed."
        continue-on-error: true
        
      - name: Run protocol fuzzing tests
        working-directory: ./go-gateway
        run: |
          echo "Running protocol fuzzing tests..."
          
          # Create fuzzing reports directory
          mkdir -p security-reports/fuzzing
          
          # Modbus protocol fuzzing
          echo "Fuzzing Modbus protocol..."
          go test -fuzz=FuzzModbusAddressParsing -fuzztime=30s ./internal/protocols/ > security-reports/fuzzing/modbus-address.log 2>&1 || true
          go test -fuzz=FuzzModbusDataConversion -fuzztime=30s ./internal/protocols/ > security-reports/fuzzing/modbus-data.log 2>&1 || true
          go test -fuzz=FuzzModbusConfigParsing -fuzztime=30s ./internal/protocols/ > security-reports/fuzzing/modbus-config.log 2>&1 || true
          
          # OPC-UA protocol fuzzing  
          echo "Fuzzing OPC-UA protocol..."
          go test -fuzz=FuzzOPCUANodeIDParsing -fuzztime=30s ./internal/protocols/ > security-reports/fuzzing/opcua-nodeid.log 2>&1 || true
          go test -fuzz=FuzzOPCUAConnectionString -fuzztime=30s ./internal/protocols/ > security-reports/fuzzing/opcua-connection.log 2>&1 || true
          go test -fuzz=FuzzOPCUABinaryProtocol -fuzztime=30s ./internal/protocols/ > security-reports/fuzzing/opcua-binary.log 2>&1 || true
          
          # Gateway API fuzzing
          echo "Fuzzing Gateway APIs..."
          go test -fuzz=FuzzRESTAPIEndpoints -fuzztime=30s ./internal/gateway/ > security-reports/fuzzing/gateway-api.log 2>&1 || true
          go test -fuzz=FuzzConfigurationParsing -fuzztime=30s ./internal/gateway/ > security-reports/fuzzing/gateway-config.log 2>&1 || true
          
          # Generate fuzzing summary
          echo "=== Fuzzing Results ===" >> security-reports/summary.txt
          echo "Fuzzing completed: $(date)" >> security-reports/summary.txt
          
          # Check for crashes/failures in fuzzing logs
          CRASHES=$(grep -l "panic\|FAIL" security-reports/fuzzing/*.log | wc -l)
          echo "Potential issues found in $CRASHES test suites" >> security-reports/summary.txt
          
          echo "Protocol fuzzing completed."
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: ./go-gateway/security-reports/
        if: always()
        continue-on-error: true
        
      - name: Upload SARIF files
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./go-gateway/security-reports/gosec.sarif
        if: always()
        continue-on-error: true
        
      - name: Run tests with coverage
        working-directory: ./go-gateway
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./... || true
          go tool cover -html=coverage.out -o coverage.html || true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./go-gateway/coverage.out
          flags: go-gateway
          name: go-gateway-coverage
        continue-on-error: true
          
      - name: Run linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ./go-gateway
          args: --timeout=5m
        continue-on-error: true
          
      - name: Build binary
        working-directory: ./go-gateway
        run: |
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bifrost-gateway ./cmd/gateway
          
      - name: Run performance tests
        working-directory: ./go-gateway
        run: |
          go test -bench=. -benchmem ./internal/performance/... || true
          
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: bifrost-gateway-linux
          path: ./go-gateway/bifrost-gateway
          
  # VS Code Extension CI/CD
  vscode-extension:
    name: VS Code Extension Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vscode-extension/package-lock.json
          
      - name: Install dependencies
        working-directory: ./vscode-extension
        run: npm ci
        
      - name: Run linter
        working-directory: ./vscode-extension
        run: npm run lint || true
        
      - name: Run security audit
        working-directory: ./vscode-extension
        run: npm audit --audit-level=moderate || true
        
      - name: Compile TypeScript
        working-directory: ./vscode-extension
        run: npm run compile
        
      - name: Run tests
        working-directory: ./vscode-extension
        run: npm test || true
        
      - name: Package extension
        working-directory: ./vscode-extension
        run: |
          npm install -g @vscode/vsce
          vsce package --allow-missing-repository || true
          
      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: bifrost-vscode-extension
          path: ./vscode-extension/*.vsix
        continue-on-error: true
          
  # Container Build
  container:
    name: Container Build & Security Scan
    runs-on: ubuntu-latest
    needs: go-gateway
    if: success() || failure()  # Run even if go-gateway fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: bifrost-gateway-linux
          path: ./go-gateway/
        continue-on-error: true
          
      - name: Make binary executable
        run: chmod +x ./go-gateway/bifrost-gateway || true
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push container
        uses: docker/build-push-action@v6
        with:
          context: ./go-gateway
          file: ./go-gateway/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true
          
      - name: Run container security scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        if: github.event_name != 'pull_request'
        continue-on-error: true
        
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        if: always() && github.event_name != 'pull_request'
        continue-on-error: true
        
  # Dependency and License Check
  dependency-check:
    name: Dependency & License Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Check Go vulnerabilities
        working-directory: ./go-gateway
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || true
          
      - name: Check Go licenses
        working-directory: ./go-gateway
        run: |
          go install github.com/google/go-licenses@latest
          go-licenses check ./... || true
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Check Node.js vulnerabilities
        working-directory: ./vscode-extension
        run: |
          npm ci
          npm audit --audit-level=high || true
          
  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [go-gateway, vscode-extension]
    if: success() || failure()  # Run even if previous jobs fail
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Go binary
        uses: actions/download-artifact@v4
        with:
          name: bifrost-gateway-linux
          path: ./go-gateway/
        continue-on-error: true
          
      - name: Make binary executable
        run: chmod +x ./go-gateway/bifrost-gateway || true
        
      - name: Start gateway in background
        working-directory: ./go-gateway
        run: |
          ./bifrost-gateway &
          sleep 5
        continue-on-error: true
          
      - name: Run integration tests
        run: |
          # Test health endpoint
          curl -f http://localhost:8080/health || echo "Health check failed"
          
          # Test metrics endpoint
          curl -f http://localhost:8080/metrics || echo "Metrics check failed"
          
          # Test API endpoints
          curl -f http://localhost:8080/api/devices || echo "API check failed"
        continue-on-error: true
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/
        if: always()
        continue-on-error: true
        
  # Notify on completion
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [go-gateway, vscode-extension, container, dependency-check, integration-tests]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.go-gateway.result == 'success' && needs.vscode-extension.result == 'success'
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Go Gateway: ${{ needs.go-gateway.result }}"
          echo "VS Code Extension: ${{ needs.vscode-extension.result }}"
          echo "Container: ${{ needs.container.result }}"
          echo "Dependencies: ${{ needs.dependency-check.result }}"
          echo "Integration: ${{ needs.integration-tests.result }}"
          
      - name: Notify failure
        if: needs.go-gateway.result == 'failure' || needs.vscode-extension.result == 'failure'
        run: |
          echo "❌ CI/CD Pipeline had issues!"
          echo "Go Gateway: ${{ needs.go-gateway.result }}"
          echo "VS Code Extension: ${{ needs.vscode-extension.result }}"
          echo "Container: ${{ needs.container.result }}"
          echo "Dependencies: ${{ needs.dependency-check.result }}"
          echo "Integration: ${{ needs.integration-tests.result }}"
          # Don't exit with error to allow the workflow to complete