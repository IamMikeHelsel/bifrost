name: CI/CD Pipeline

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"

jobs:
  # ============================================================================
  # QUALITY CHECKS
  # ============================================================================
  lint-and-format:
    name: "ðŸŽ¨ Lint & Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Check Python formatting
        run: uv run ruff format --check .

      - name: Check Python linting
        run: uv run ruff check .

      - name: Check Markdown formatting
        run: uv run mdformat --check .

      - name: Type checking
        run: uv run mypy packages/*/src --ignore-missing-imports

  # ============================================================================
  # SECURITY CHECKS
  # ============================================================================
  security:
    name: "ðŸ”’ Security Audit"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run security audit
        run: uv run pip-audit

      - name: Run Bandit security scan
        run: uv run bandit -r packages/*/src -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: "*-report.json"

  # ============================================================================
  # BUILD AND TEST
  # ============================================================================
  test:
    name: "ðŸ§ª Test"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run tests with coverage
        run: |
          uv run pytest packages/*/tests \
            --cov=packages \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junitxml=pytest-results.xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: pytest-results.xml

  # ============================================================================
  # BUILD PACKAGES
  # ============================================================================
  build:
    name: "ðŸ“¦ Build Packages"
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Build all packages
        run: |
          for package in packages/*/; do
            echo "Building $package"
            cd "$package"
            uv build
            cd - > /dev/null
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: packages/*/dist/*

  # ============================================================================
  # DOCUMENTATION
  # ============================================================================
  docs:
    name: "ðŸ“š Documentation"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Build documentation
        run: |
          uv run sphinx-build docs docs/_build/html

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration:
    name: "ðŸ”— Integration Tests"
    runs-on: ubuntu-latest
    needs: [build]
    services:
      # Mock PLC simulator for integration tests
      modbus-simulator:
        image: oitc/modbus-server
        ports:
          - 502:502
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run integration tests
        run: |
          uv run pytest packages/*/tests/integration \
            -v \
            --tb=short \
            -m "integration"

  # ============================================================================
  # RELEASE (main branch only)
  # ============================================================================
  release:
    name: "ðŸš€ Release"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [lint-and-format, security, test, build, docs, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: dist/

      - name: Check if version changed
        id: version-check
        run: |
          # Get the current version from the main package
          CURRENT_VERSION=$(uv run python -c "import sys; sys.path.insert(0, 'packages/bifrost/src'); import bifrost; print(bifrost.__version__)")
          
          # Check if this version has been tagged
          if git tag --list | grep -q "v$CURRENT_VERSION"; then
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.version-check.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-check.outputs.version }}
          name: Release v${{ steps.version-check.outputs.version }}
          body: |
            ## What's Changed
            
            This release includes all changes merged to main since the last release.
            
            ## Package Information
            
            - **bifrost**: Main package with Modbus support
            - **bifrost-core**: Core abstractions
            
            ## Installation
            
            ```bash
            uv add bifrost
            # or
            pip install bifrost
            ```
            
            Full changelog: https://github.com/${{ github.repository }}/compare/v${{ steps.version-check.outputs.version }}...main
          files: dist/**/*
          draft: false
          prerelease: false

      - name: Publish to PyPI
        if: steps.version-check.outputs.version_changed == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv run twine upload dist/**/*.whl dist/**/*.tar.gz

  # ============================================================================
  # STATUS CHECK (for branch protection)
  # ============================================================================
  ci-success:
    name: "âœ… CI Success"
    runs-on: ubuntu-latest
    needs: [lint-and-format, security, test, build]
    if: always()
    steps:
      - name: Check CI results
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" ]]; then
            echo "All CI checks passed!"
            exit 0
          else
            echo "Some CI checks failed!"
            exit 1
          fi