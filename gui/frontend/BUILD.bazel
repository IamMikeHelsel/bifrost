# This BUILD file is a placeholder for the React frontend.
# A full Bazel setup for a React application would typically involve:
# 1. Adding `rules_nodejs` to your MODULE.bazel or WORKSPACE.
# 2. Using `npm_install` or `yarn_install` rules to manage node_modules.
# 3. Using rules like `ts_project` (for TypeScript), `webpack_bundle`, or
#    custom genrules to compile/bundle the React application.
#
# For now, this filegroup simply makes Bazel aware of the frontend source files.

filegroup(
    name = "bifrost_gui_frontend_sources",
    srcs = glob([
        "*.html",
        "*.json",
        "src/**/*.js",
        "src/**/*.css",
        # Add other file types like .ts, .tsx, .svg, .png if they exist
    ]),
    visibility = ["//gui:__pkg__"],
)

# TODO: Replace the filegroup above with actual Bazel rules for building
# the React application when a Node.js toolchain and rules_nodejs are configured.
# Example (conceptual, depends on rules_nodejs setup):
#
# load("@npm//:defs.bzl", "npm_link_all_packages")
# load("@build_bazel_rules_nodejs//:defs.bzl", "nodejs_binary")
#
# npm_link_all_packages(name = "node_modules")
#
# nodejs_binary(
#     name = "build_script",
#     data = [
#         ":node_modules",
#         "package.json",
#         "//:bazel_version", # example dependency
#         # ... other dependencies
#     ] + glob(["src/**"]) + glob(["public/**"]),
#     entry_point = ":node_modules/react-scripts/bin/react-scripts.js",
#     args = ["build"],
#     output_dir = True,
# )
#
# This is a simplified example; actual implementation can be more complex.
# Using Vite or another modern bundler might also be preferable.
