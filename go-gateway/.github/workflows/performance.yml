name: Performance Testing

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Test duration in minutes'
        required: true
        default: '10'
      concurrent_connections:
        description: 'Number of concurrent connections'
        required: true
        default: '1000'

jobs:
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Build gateway
      run: |
        go build -o bin/bifrost-gateway ./cmd/gateway
    
    - name: Start gateway
      run: |
        ./bin/bifrost-gateway -log-level info &
        sleep 5
        # Verify gateway is running
        curl -f http://localhost:8080/health
    
    - name: Install performance testing tools
      run: |
        # Install wrk for HTTP load testing
        sudo apt-get update
        sudo apt-get install -y wrk
        
        # Install hey for additional HTTP testing
        wget https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
        chmod +x hey_linux_amd64
        sudo mv hey_linux_amd64 /usr/local/bin/hey
    
    - name: Run HTTP performance tests
      run: |
        # Test health endpoint
        wrk -t12 -c400 -d30s --latency http://localhost:8080/health > wrk_health.txt
        
        # Test API endpoints
        wrk -t12 -c400 -d30s --latency http://localhost:8080/api/devices > wrk_api.txt
        
        # Test with hey for different metrics
        hey -n 10000 -c 100 http://localhost:8080/health > hey_health.txt
        hey -n 10000 -c 100 http://localhost:8080/api/devices > hey_api.txt
    
    - name: Run Modbus performance tests
      run: |
        # Run custom Modbus performance test
        go run examples/performance_demo.go > modbus_performance.txt
    
    - name: Run memory profiling
      run: |
        # Start gateway with profiling
        pkill bifrost-gateway || true
        ./bin/bifrost-gateway -log-level info &
        GATEWAY_PID=$!
        sleep 5
        
        # Install pprof
        go install github.com/google/pprof@latest
        
        # Capture CPU profile
        curl -o cpu.prof http://localhost:8080/debug/pprof/profile?seconds=30 &
        
        # Generate load during profiling
        wrk -t4 -c100 -d30s http://localhost:8080/health > /dev/null &
        
        wait
        
        # Capture heap profile
        curl -o heap.prof http://localhost:8080/debug/pprof/heap
        
        # Generate profile reports
        go tool pprof -text cpu.prof > cpu_profile.txt
        go tool pprof -text heap.prof > heap_profile.txt
        
        kill $GATEWAY_PID || true
    
    - name: Analyze results
      run: |
        echo "=== HTTP Performance Results ===" > performance_report.txt
        echo "" >> performance_report.txt
        echo "Health Endpoint (wrk):" >> performance_report.txt
        cat wrk_health.txt >> performance_report.txt
        echo "" >> performance_report.txt
        echo "API Endpoint (wrk):" >> performance_report.txt
        cat wrk_api.txt >> performance_report.txt
        echo "" >> performance_report.txt
        echo "Health Endpoint (hey):" >> performance_report.txt
        cat hey_health.txt >> performance_report.txt
        echo "" >> performance_report.txt
        echo "API Endpoint (hey):" >> performance_report.txt
        cat hey_api.txt >> performance_report.txt
        echo "" >> performance_report.txt
        echo "=== Modbus Performance ===" >> performance_report.txt
        cat modbus_performance.txt >> performance_report.txt
        echo "" >> performance_report.txt
        echo "=== CPU Profile ===" >> performance_report.txt
        cat cpu_profile.txt >> performance_report.txt
        echo "" >> performance_report.txt
        echo "=== Memory Profile ===" >> performance_report.txt
        cat heap_profile.txt >> performance_report.txt
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          performance_report.txt
          *.prof
          *.txt
    
    - name: Check performance thresholds
      run: |
        # Extract metrics and check against thresholds
        HEALTH_RPS=$(grep "Requests/sec:" wrk_health.txt | awk '{print $2}')
        API_RPS=$(grep "Requests/sec:" wrk_api.txt | awk '{print $2}')
        
        echo "Health endpoint RPS: $HEALTH_RPS"
        echo "API endpoint RPS: $API_RPS"
        
        # Set thresholds (adjust based on requirements)
        HEALTH_THRESHOLD=5000
        API_THRESHOLD=1000
        
        if (( $(echo "$HEALTH_RPS < $HEALTH_THRESHOLD" | bc -l) )); then
          echo "::warning::Health endpoint performance below threshold: $HEALTH_RPS < $HEALTH_THRESHOLD"
        fi
        
        if (( $(echo "$API_RPS < $API_THRESHOLD" | bc -l) )); then
          echo "::warning::API endpoint performance below threshold: $API_RPS < $API_THRESHOLD"
        fi
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance_report.txt', 'utf8');
          
          const comment = `## Performance Test Results
          
          \`\`\`
          ${report}
          \`\`\`
          
          *Performance test run on commit ${context.sha}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  stress-test:
    name: Stress Test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Build gateway
      run: |
        go build -o bin/bifrost-gateway ./cmd/gateway
    
    - name: Start gateway with monitoring
      run: |
        # Start with verbose logging for stress test
        ./bin/bifrost-gateway -log-level debug &
        GATEWAY_PID=$!
        echo $GATEWAY_PID > gateway.pid
        sleep 5
    
    - name: Run stress test
      run: |
        DURATION=${{ github.event.inputs.test_duration || '10' }}
        CONNECTIONS=${{ github.event.inputs.concurrent_connections || '1000' }}
        
        echo "Running stress test for ${DURATION} minutes with ${CONNECTIONS} connections"
        
        # Install stress testing tools
        sudo apt-get update
        sudo apt-get install -y stress-ng
        
        # Monitor system resources
        iostat -x 1 > iostat.log &
        IOSTAT_PID=$!
        
        # Run the stress test
        timeout ${DURATION}m wrk -t12 -c${CONNECTIONS} -d${DURATION}m --latency http://localhost:8080/health > stress_test.txt
        
        # Stop monitoring
        kill $IOSTAT_PID || true
        
        # Stop gateway
        GATEWAY_PID=$(cat gateway.pid)
        kill $GATEWAY_PID || true
    
    - name: Analyze stress test results
      run: |
        echo "=== Stress Test Results ===" > stress_report.txt
        cat stress_test.txt >> stress_report.txt
        echo "" >> stress_report.txt
        echo "=== System Resource Usage ===" >> stress_report.txt
        tail -50 iostat.log >> stress_report.txt
    
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      with:
        name: stress-test-results
        path: |
          stress_report.txt
          iostat.log