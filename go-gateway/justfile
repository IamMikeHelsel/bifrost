# Bifrost Industrial Gateway Justfile
# Modern task runner for the Bifrost Gateway project

# Default settings
set shell := ["bash", "-c"]
set dotenv-load := true

# Variables
BINARY_NAME := "bifrost-gateway"
BINARY_DIR := "bin"
MAIN_PATH := "cmd/gateway/main.go"
GO_FLAGS := "-ldflags='-s -w' -trimpath"

# Default recipe to display help
default:
    @just --list

# Development workflow
dev: fmt lint test

# Quick check (format + lint + typecheck)
check: fmt lint-check

# Format all code
fmt: fmt-go fmt-starlark

# Lint all code
lint: lint-go lint-starlark

# Check linting without fixing
lint-check: lint-go-check lint-starlark-check

# Go formatting
fmt-go:
    @echo "Formatting Go code..."
    go fmt ./...

# Go linting
lint-go:
    @echo "Linting Go code..."
    golangci-lint run --fix

# Go linting check only
lint-go-check:
    @echo "Checking Go code..."
    golangci-lint run

# Starlark formatting
fmt-starlark:
    @echo "Formatting Starlark files..."
    @if command -v buildifier >/dev/null 2>&1; then \
        find . -name "*.bzl" -o -name "BUILD" -o -name "BUILD.bazel" -o -name "WORKSPACE" -o -name "WORKSPACE.bazel" | xargs buildifier -mode=fix; \
    elif [ -f ~/go/bin/buildifier ]; then \
        find . -name "*.bzl" -o -name "BUILD" -o -name "BUILD.bazel" -o -name "WORKSPACE" -o -name "WORKSPACE.bazel" | xargs ~/go/bin/buildifier -mode=fix; \
    else \
        echo "buildifier not found, install with: go install github.com/bazelbuild/buildtools/buildifier@latest"; \
        exit 1; \
    fi

# Starlark linting
lint-starlark:
    @echo "Linting Starlark files..."
    @if command -v buildifier >/dev/null 2>&1; then \
        find . -name "*.bzl" -o -name "BUILD" -o -name "BUILD.bazel" -o -name "WORKSPACE" -o -name "WORKSPACE.bazel" | xargs buildifier -mode=fix -lint=warn; \
    elif [ -f ~/go/bin/buildifier ]; then \
        find . -name "*.bzl" -o -name "BUILD" -o -name "BUILD.bazel" -o -name "WORKSPACE" -o -name "WORKSPACE.bazel" | xargs ~/go/bin/buildifier -mode=fix -lint=warn; \
    else \
        echo "buildifier not found, install with: go install github.com/bazelbuild/buildtools/buildifier@latest"; \
        exit 1; \
    fi

# Starlark linting check only
lint-starlark-check:
    @echo "Checking Starlark files..."
    @if command -v buildifier >/dev/null 2>&1; then \
        find . -name "*.bzl" -o -name "BUILD" -o -name "BUILD.bazel" -o -name "WORKSPACE" -o -name "WORKSPACE.bazel" | xargs buildifier -mode=check -lint=warn; \
    elif [ -f ~/go/bin/buildifier ]; then \
        find . -name "*.bzl" -o -name "BUILD" -o -name "BUILD.bazel" -o -name "WORKSPACE" -o -name "WORKSPACE.bazel" | xargs ~/go/bin/buildifier -mode=check -lint=warn; \
    else \
        echo "buildifier not found, install with: go install github.com/bazelbuild/buildtools/buildifier@latest"; \
        exit 1; \
    fi

# Check format of Starlark files
check-starlark:
    @echo "Checking Starlark file formatting..."
    @if command -v buildifier >/dev/null 2>&1; then \
        find . -name "*.bzl" -o -name "BUILD" -o -name "BUILD.bazel" -o -name "WORKSPACE" -o -name "WORKSPACE.bazel" | xargs buildifier -mode=diff; \
    elif [ -f ~/go/bin/buildifier ]; then \
        find . -name "*.bzl" -o -name "BUILD" -o -name "BUILD.bazel" -o -name "WORKSPACE" -o -name "WORKSPACE.bazel" | xargs ~/go/bin/buildifier -mode=diff; \
    else \
        echo "buildifier not found, install with: go install github.com/bazelbuild/buildtools/buildifier@latest"; \
        exit 1; \
    fi

# Build the binary
build:
    @echo "Building {{BINARY_NAME}}..."
    @mkdir -p {{BINARY_DIR}}
    go build {{GO_FLAGS}} -o {{BINARY_DIR}}/{{BINARY_NAME}} {{MAIN_PATH}}

# Build for all platforms
build-all:
    @echo "Building for all platforms..."
    @mkdir -p {{BINARY_DIR}}
    GOOS=linux GOARCH=amd64 go build {{GO_FLAGS}} -o {{BINARY_DIR}}/{{BINARY_NAME}}-linux-amd64 {{MAIN_PATH}}
    GOOS=linux GOARCH=arm64 go build {{GO_FLAGS}} -o {{BINARY_DIR}}/{{BINARY_NAME}}-linux-arm64 {{MAIN_PATH}}
    GOOS=darwin GOARCH=amd64 go build {{GO_FLAGS}} -o {{BINARY_DIR}}/{{BINARY_NAME}}-darwin-amd64 {{MAIN_PATH}}
    GOOS=darwin GOARCH=arm64 go build {{GO_FLAGS}} -o {{BINARY_DIR}}/{{BINARY_NAME}}-darwin-arm64 {{MAIN_PATH}}
    GOOS=windows GOARCH=amd64 go build {{GO_FLAGS}} -o {{BINARY_DIR}}/{{BINARY_NAME}}-windows-amd64.exe {{MAIN_PATH}}

# Run the application
run: build
    @echo "Running {{BINARY_NAME}}..."
    ./{{BINARY_DIR}}/{{BINARY_NAME}}

# Run with custom config
run-config: build
    @echo "Running {{BINARY_NAME}} with custom config..."
    ./{{BINARY_DIR}}/{{BINARY_NAME}} -config gateway.yaml

# Run in development mode
run-dev:
    @echo "Running in development mode..."
    go run {{MAIN_PATH}} -log-level debug

# Run tests
test:
    @echo "Running tests..."
    go test -v -race ./...

# Run tests with coverage
test-coverage:
    @echo "Running tests with coverage..."
    go test -v -race -coverprofile=coverage.out ./...
    go tool cover -html=coverage.out -o coverage.html

# Run benchmarks
bench:
    @echo "Running benchmarks..."
    go test -v -bench=. -benchmem ./...

# Install dependencies
deps:
    @echo "Installing dependencies..."
    go mod download
    go mod tidy

# Clean build artifacts
clean:
    @echo "Cleaning build artifacts..."
    rm -rf {{BINARY_DIR}}
    rm -f coverage.out coverage.html
    go clean

# Install the binary
install: build
    @echo "Installing {{BINARY_NAME}}..."
    go install {{MAIN_PATH}}

# Docker build
docker-build:
    @echo "Building Docker image..."
    docker build -t bifrost-gateway .

# Docker run
docker-run:
    @echo "Running Docker container..."
    docker run -p 8080:8080 -p 9090:9090 bifrost-gateway

# Performance test
perf-test:
    @echo "Running performance tests..."
    go test -v -bench=BenchmarkModbus -benchtime=10s ./internal/protocols/

# Security scan
security-scan:
    @echo "Running security scans..."
    @if command -v govulncheck >/dev/null 2>&1; then \
        govulncheck ./...; \
    else \
        echo "govulncheck not found, install with: go install golang.org/x/vuln/cmd/govulncheck@latest"; \
    fi
    @if command -v gosec >/dev/null 2>&1; then \
        gosec ./...; \
    else \
        echo "gosec not found, install with: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest"; \
    fi

# Development setup
dev-setup:
    @echo "Setting up development environment..."
    go mod download
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    go install github.com/bazelbuild/buildtools/buildifier@latest
    go install golang.org/x/vuln/cmd/govulncheck@latest
    go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

# Pre-commit hook setup
pre-commit-setup:
    @echo "Setting up pre-commit hooks..."
    @if command -v pre-commit >/dev/null 2>&1; then \
        pre-commit install; \
    else \
        echo "pre-commit not found, install with: pip install pre-commit"; \
    fi

# Show help
help:
    @echo "Bifrost Gateway Development Commands"
    @echo ""
    @echo "Development workflow:"
    @echo "  dev              - Run full development cycle (format + lint + test)"
    @echo "  check            - Quick check (format + lint + typecheck)"
    @echo ""
    @echo "Code formatting:"
    @echo "  fmt              - Format all code (Go + Starlark)"
    @echo "  fmt-go           - Format Go code only"
    @echo "  fmt-starlark     - Format Starlark files only"
    @echo ""
    @echo "Code linting:"
    @echo "  lint             - Lint all code (Go + Starlark)"
    @echo "  lint-go          - Lint Go code only"
    @echo "  lint-starlark    - Lint Starlark files only"
    @echo "  lint-check       - Check linting without fixing"
    @echo "  check-starlark   - Check Starlark formatting"
    @echo ""
    @echo "Build commands:"
    @echo "  build            - Build the binary"
    @echo "  build-all        - Build for all platforms"
    @echo "  install          - Install the binary"
    @echo ""
    @echo "Run commands:"
    @echo "  run              - Build and run the application"
    @echo "  run-config       - Run with custom configuration"
    @echo "  run-dev          - Run in development mode"
    @echo ""
    @echo "Testing:"
    @echo "  test             - Run tests"
    @echo "  test-coverage    - Run tests with coverage"
    @echo "  bench            - Run benchmarks"
    @echo "  perf-test        - Run performance tests"
    @echo ""
    @echo "Docker:"
    @echo "  docker-build     - Build Docker image"
    @echo "  docker-run       - Run Docker container"
    @echo ""
    @echo "Maintenance:"
    @echo "  deps             - Install dependencies"
    @echo "  clean            - Clean build artifacts"
    @echo "  security-scan    - Run security scans"
    @echo ""
    @echo "Setup:"
    @echo "  dev-setup        - Set up development environment"
    @echo "  pre-commit-setup - Set up pre-commit hooks"
    @echo ""
    @echo "For more information, visit: https://github.com/bifrost/gateway"