version: '3.8'

services:
  bifrost-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bifrost-gateway
    ports:
      - "8080:8080"   # HTTP API
      - "9090:9090"   # gRPC
      - "2112:2112"   # Prometheus metrics
    volumes:
      - ./gateway.yaml:/gateway.yaml:ro
      - ./logs:/logs
    environment:
      - BIFROST_LOG_LEVEL=info
      - BIFROST_CONFIG_PATH=/gateway.yaml
    restart: unless-stopped
    networks:
      - bifrost-network
    healthcheck:
      test: ["CMD", "/bifrost-gateway", "-health-check"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: bifrost-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - bifrost-network

  grafana:
    image: grafana/grafana:10.0.3
    container_name: bifrost-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    restart: unless-stopped
    networks:
      - bifrost-network

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: bifrost-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    restart: unless-stopped
    networks:
      - bifrost-network

  redis:
    image: redis:7-alpine
    container_name: bifrost-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - bifrost-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: bifrost-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - bifrost-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: bifrost-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - bifrost-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: bifrost-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - bifrost-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.9.0
    container_name: bifrost-filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - bifrost-network

networks:
  bifrost-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  redis_data:
  elasticsearch_data: