# BUILD.bazel for bifrost-protocols (Additional Protocols)
# Additional industrial protocol implementations

load("@rules_python//python:defs.bzl", "py_library", "py_test")
load("@rules_python//python:packaging.bzl", "py_wheel")
# Future: Rust rules when components are implemented
# load("@rules_rust//rust:defs.bzl", "rust_shared_library")

# Note: This package is not yet implemented 
# This BUILD file serves as a template for additional protocols package

# Future: Main library target (Python + optional Rust for performance)
# py_library(
#     name = "bifrost_protocols",
#     srcs = glob(["src/bifrost_protocols/**/*.py"]),
#     imports = ["src"],
#     deps = [
#         "//packages/bifrost-core:bifrost_core",
#         ":protocols_native",  # Optional Rust extension
#         "@pypi//pyserial",
#         "@pypi//can",
#         "@pypi//bleak",  # Bluetooth Low Energy
#     ],
#     visibility = ["//visibility:public"],
# )

# Future: Rust shared library for performance-critical protocol codecs
# rust_shared_library(
#     name = "protocols_native",
#     srcs = glob(["native/src/**/*.rs"]),
#     crate_root = "native/src/lib.rs",
#     deps = [
#         "@crate_index//:pyo3",
#         "@crate_index//:tokio",
#         "@crate_index//:serde",
#         "@crate_index//:byteorder",
#         "//third_party:snap7",  # Siemens S7 library
#     ],
#     crate_features = ["pyo3/extension-module"],
# )

# Future: Wheel distribution target
# py_wheel(
#     name = "wheel",
#     distribution = "bifrost-protocols",
#     version = "0.1.0",
#     deps = [":bifrost_protocols"],
#     platform = select({
#         "@platforms//os:linux": "linux_x86_64",
#         "@platforms//os:macos": "macosx_11_0_arm64",
#         "@platforms//os:windows": "win_amd64",
#     }),
#     wheel_metadata = {
#         "Author": "Bifrost Contributors",
#         "Author-email": "hello@bifrost.dev",
#         "Description-Content-Type": "text/markdown",
#         "License": "MIT",
#         "Summary": "Additional industrial protocols for Bifrost",
#     },
# )

# Future: Protocol-specific test targets
# py_test(
#     name = "test_ethernet_ip",
#     srcs = ["tests/test_ethernet_ip.py"],
#     deps = [
#         ":bifrost_protocols",
#         "@pypi//pytest",
#         "@pypi//pytest_asyncio",
#     ],
#     tags = ["protocols", "ethernet_ip"],
# )

# py_test(
#     name = "test_profinet",
#     srcs = ["tests/test_profinet.py"],
#     deps = [
#         ":bifrost_protocols",
#         "@pypi//pytest",
#         "@pypi//pytest_asyncio",
#     ],
#     tags = ["protocols", "profinet"],
# )

# py_test(
#     name = "test_canopen",
#     srcs = ["tests/test_canopen.py"],
#     deps = [
#         ":bifrost_protocols", 
#         "@pypi//pytest",
#         "@pypi//pytest_asyncio",
#     ],
#     tags = ["protocols", "canopen"],
# )

# Future: Test suite for all protocol tests
# test_suite(
#     name = "tests",
#     tests = [
#         ":test_ethernet_ip",
#         ":test_profinet",
#         ":test_canopen",
#     ],
# )

# Placeholder target to prevent Bazel errors
filegroup(
    name = "placeholder",
    srcs = [],
    visibility = ["//visibility:public"],
)