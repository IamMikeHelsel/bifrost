# BUILD.bazel for bifrost-opcua (Python + Rust + Native Libraries)
# OPC UA protocol implementation with high-performance native components

load("@rules_python//python:defs.bzl", "py_library", "py_test")
load("@rules_python//python:packaging.bzl", "py_wheel")
# Future: Rust rules when components are implemented
# load("@rules_rust//rust:defs.bzl", "rust_shared_library")

# Note: This package is not yet implemented
# This BUILD file serves as a template for the complex multi-language package

# Future: Main library target (Python + Rust)
# py_library(
#     name = "bifrost_opcua",
#     srcs = glob(["src/bifrost_opcua/**/*.py"]),
#     imports = ["src"],
#     deps = [
#         "//packages/bifrost-core:bifrost_core",
#         ":opcua_native",  # Rust extension
#         "@pypi//asyncua",
#         "@pypi//cryptography",
#     ],
#     visibility = ["//visibility:public"],
# )

# Future: Rust shared library for high-performance OPC UA operations
# rust_shared_library(
#     name = "opcua_native",
#     srcs = glob(["native/src/**/*.rs"]),
#     crate_root = "native/src/lib.rs",
#     deps = [
#         "@crate_index//:pyo3",
#         "@crate_index//:tokio",
#         "@crate_index//:opcua",
#         "//third_party:open62541",  # Native OPC UA library
#     ],
#     crate_features = ["pyo3/extension-module"],
#     linkopts = select({
#         "@platforms//os:linux": ["-lssl", "-lcrypto"],
#         "@platforms//os:macos": ["-lssl", "-lcrypto"],
#         "@platforms//os:windows": ["-lssl", "-lcrypto"],
#     }),
# )

# Future: Platform-specific wheel with native extensions
# py_wheel(
#     name = "wheel",
#     distribution = "bifrost-opcua",
#     version = "0.1.0",
#     deps = [":bifrost_opcua"],
#     platform = select({
#         "@platforms//os:linux": "linux_x86_64",
#         "@platforms//os:macos": "macosx_11_0_arm64", 
#         "@platforms//os:windows": "win_amd64",
#     }),
#     wheel_metadata = {
#         "Author": "Bifrost Contributors",
#         "Author-email": "hello@bifrost.dev",
#         "Description-Content-Type": "text/markdown",
#         "License": "MIT",
#         "Summary": "OPC UA protocol implementation for Bifrost",
#     },
# )

# Future: Test targets
# py_test(
#     name = "tests",
#     srcs = glob(["tests/**/*.py"]),
#     deps = [
#         ":bifrost_opcua",
#         "@pypi//pytest",
#         "@pypi//pytest_asyncio",
#     ],
# )

# Placeholder target to prevent Bazel errors
filegroup(
    name = "placeholder",
    srcs = [],
    visibility = ["//visibility:public"],
)